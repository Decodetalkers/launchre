import { Button, VerticalBox, GridBox , ComboBox,ListView, ScrollView,SpinBox, LineEdit, HorizontalBox, StandardListView, CheckBox} from "std-widgets.slint";
export struct MyItem := {
    title: string,
    description: string,
    icon: image,
    index: int,
    supported_types: [StandardListViewItem],
    categrades: [string],
    hasactions: bool,
    actions:[string],
    actionchoosed: string,
}
struct Cats := {
    cat: string,
    selected: bool,
}
export AppWindow := Window {
    //property<int> counter: 42;
    property<[MyItem]> items ;
    property <[Cats]> cats ;
    property <image> defaultimage : @image-url("../assert/revolution.png");
    callback request-start-app(int);
    callback request-start-app-with-action(int,string);
    callback request-fillter(string);
    callback request-fillter-with-cats(string, [Cats]);
    callback request-exit();
    callback reset-lineedit();
    reset-lineedit => { 
        searchline.text = "";
    }
    width: 1000px;
    height: 700px;
    no-frame: true;
    forward-focus: my-key-handler;
    my-key-handler := FocusScope {
        key-pressed(event) => {
            if (event.modifiers.control) {
                debug("control was pressed during this event");
            }
            if (event.text == Keys.Escape) {
                request-exit();
            } else if (event.text == Keys.DownArrow && mainlist.current-item + 1 < items.length) {
                mainlist.current-item += 1;
                mainlist.viewport-y = -1 * mainlist.current-item * 112px;
                mainlist.current-selected = items[mainlist.current-item].index;
            } else if (event.text == Keys.DownArrow && mainlist.current-item + 1 == items.length) {
                mainlist.current-item = 0;
                mainlist.viewport-y = 0;
                mainlist.current-selected = items[mainlist.current-item].index;
            } else if (event.text == Keys.UpArrow && mainlist.current-item > 0) {
                mainlist.current-item -= 1;
                mainlist.viewport-y = -1 * mainlist.current-item * 112px;
                mainlist.current-selected = items[mainlist.current-item].index;
            } else if (event.text == Keys.UpArrow && mainlist.current-item == 0) {
                mainlist.current-item = items.length - 1;
                mainlist.viewport-y = -1 * mainlist.current-item * 112px;
                mainlist.current-selected = items[mainlist.current-item].index;
            } else if (event.text == Keys.Return && mainlist.current-selected != -1 )  {
                if (items[mainlist.current-item].actionchoosed == "default") {
                    request-start-app(mainlist.current-selected);
                } else {
                    request-start-app-with-action(mainlist.current-selected, items[mainlist.current-item].actionchoosed);
                }
            } else if (event.text == " " || event.text == Keys.Backspace) {
                searchline.focus();
            }
            accept
        }
    }
    HorizontalBox {
        VerticalBox {
            HorizontalLayout {
                searchline := LineEdit { 
                    placeholder-text: "世界に革命を起こす力をください";
                    font-size: 20px;
                    edited(text) => {
                        // if is advanced
                        if(check.checked) {
                            request-fillter-with-cats(text,cats);
                        } else {
                            request-fillter(text);
                        }
                        mainlist.viewport-y = 0;
                        mainlist.current-item = -1;
                        mainlist.current-selected = -1;
                        image.rotation-angle = image.rotation-angle + 1deg;
                    }
                    accepted => { 
                        root.focus();
                    }
                }
                check := CheckBox { 
                    text: "advanced";
                    checked: false;
                    width: 100px;
                    toggled => { 
                        if (check.checked) {
                            request-fillter-with-cats(searchline.text,cats);
                        } else {
                            request-fillter(searchline.text);
                        }
                        mainlist.viewport-y = 0;
                        mainlist.current-item = -1;
                        mainlist.current-selected = -1;
                    }
                }
                image := Image {
                    source: root.defaultimage;
                    width: 36px;
                    height: 36px;
                    rotation-angle: 0deg;
                }
            }
            if check.checked : HorizontalBox {
                ScrollView {
                    height: 70px;
                    HorizontalBox {
                        spacing: 0px;
                        for cat in cats  : Rectangle {
                            visible: cat.selected;
                            border-width: 2px;
                            width: !cat.selected? 0px : 150px;
                            background: Colors.pink;
                            border-radius: !cat.selected ? 0px : 15px;
                            border-color: Colors.transparent;
                            if cat.selected : HorizontalBox { 
                                Image { source: root.defaultimage; height: 20px; width: 20px; }
                                Text { text: cat.cat; }
                            }
                            if cat.selected : TouchArea {
                                width: parent.width;
                                height: parent.height;
                                clicked => {
                                    cat.selected = false;
                                    request-fillter-with-cats(searchline.text,cats);
                                    mainlist.viewport-y = 0;
                                    mainlist.current-item = -1;
                                    mainlist.current-selected = -1;
                                }
                            }
                        }
                    }
                }
                ScrollView { 
                    height: 70px;
                    HorizontalBox {
                        spacing: 0px;
                        for cat in cats  : Rectangle {
                            visible: !cat.selected;
                            border-width: 2px;
                            border-color: Colors.transparent;
                            width: cat.selected ? 0px : 150px;
                            background: Colors.grey;
                            border-radius: cat.selected ? 0px : 15px;
                            if !cat.selected : HorizontalBox { 
                                Image { source: root.defaultimage; height: 20px; width: 20px; }
                                Text { text: cat.cat; }
                            }
                            if !cat.selected : TouchArea {
                                width: parent.width;
                                height: parent.height;
                                clicked => {
                                    cat.selected = true;
                                    request-fillter-with-cats(searchline.text,cats);
                                    mainlist.viewport-y = 0;
                                    mainlist.current-item = -1;
                                    mainlist.current-selected = -1;
                                }
                            }
                        }
                    }
                }
            }
            mainlist := ListView {
                has-focus:true;
                property <int> current-item : -1 ;
                property <int> current-selected: -1;
                for item[idx] in items : Rectangle {
                    background: idx == mainlist.current-item ? Colors.grey 
                        : touch.has-hover ? Colors.dimgrey
                        : root.background;
                    HorizontalLayout {
                        VerticalBox {
                            spacing: 10px;
                            Image {
                                source: item.icon;
                                width: 100px;
                                height: 100px;
                            }
                        }
                        VerticalBox {
                            Text {
                                text: item.title;
                                font-weight: 10;
                                font-size: 20px;
                            }
                            Text { 
                                text: item.description;
                                font-weight: 1;
                                font-size: 10px;
                            }

                        }
                    }
                    touch := TouchArea {
                        width: parent.width;
                        height: 70px;
                        clicked => {
                            if (item.actionchoosed == "default") {
                                request-start-app(item.index);
                            } else {
                                request-start-app-with-action(item.index, item.actionchoosed);
                            }
                        }
                    }
                }
            }
        }
       if mainlist.current-item >= 0 :  VerticalBox {
            spacing: 3px;
            visible: mainlist.current-item >= 0;
            width:  250px ;
            Image { 
                source: items[mainlist.current-item].icon ;
            }
            if items[mainlist.current-item].hasactions == true : Text {
                text: "actions";
                horizontal-alignment: center;
                font-size: 20px;
                font-weight: 5;
            }
            HorizontalBox {
                visible: items[mainlist.current-item].hasactions == true;
                height: items[mainlist.current-item].hasactions == true ? 35px : 0px;
                ComboBox {
                    height: 35px;
                    current-value: items[mainlist.current-item].actionchoosed;
                    //visible: items[mainlist.current-item].hasactions == true;
                    //height: items[mainlist.current-item].hasactions == true ? 35px : 0px;
                    model: items[mainlist.current-item].actions;
                    selected(text) => {
                        items[mainlist.current-item].actionchoosed = text;
                    }
                }
                Button { 
                    text: "Run";
                    width: 40px;
                    height: 35px;
                    clicked => { 
                        if (items[mainlist.current-item].actionchoosed == "default") {
                            request-start-app(mainlist.current-selected);
                        } else {
                            request-start-app-with-action(mainlist.current-selected, items[mainlist.current-item].actionchoosed);
                        }
                    }
                }
            }
            Text {
                text: "supported types";
                horizontal-alignment: center;
                font-size: 20px;
                font-weight: 5;
            }
            StandardListView{
                model:items[mainlist.current-item].supported_types;
                forward-focus: key-handle;
                key-handle := FocusScope { 
                    key-pressed(event) => {
                        if (event.text == Keys.Escape) {
                            root.focus();
                        }
                        accept
                    }
                }
            }
            Text { 
                text: "Categrades";
                horizontal-alignment: center;
                font-size: 20px;
                font-weight: 5;
            }
            ScrollView {
                height: 70px;
                HorizontalBox {  
                    for cat in items[mainlist.current-item].categrades : Rectangle {
                        background: Colors.pink;
                        border-radius: 15px;
                        HorizontalBox { 
                            Image { source: root.defaultimage; height: 20px; width: 20px; }
                            Text { text: cat; }
                        }
                    }
                }
            }
        }
    }
}
