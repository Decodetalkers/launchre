import { Button, VerticalBox, GridBox , ListView, ScrollView,SpinBox, LineEdit, HorizontalBox, StandardListView} from "std-widgets.slint";
export struct MyItem := {
  title: string,
  description: string,
  icon: image,
  index: int,
  supported_types: [StandardListViewItem],
  categrades: [string]
}
export AppWindow := Window {
    //property<int> counter: 42;
    property<[MyItem]> items ;
    property <image> defaultimage : @image-url("../assert/revolution.png") ;
    callback request-start-app(int);
    callback request-fillter(string);
    callback request-exit();
    callback reset-lineedit();
    reset-lineedit => { 
        searchline.text = "";
    }
    width: 1000px;
    height: 700px;
    no-frame: true;
    forward-focus: my-key-handler;
    my-key-handler := FocusScope {
        key-pressed(event) => {
            //debug(event.text);
            if (event.modifiers.control) {
                debug("control was pressed during this event");
            }
            if (event.text == Keys.Escape) {
                request-exit();
            } else if (event.text == Keys.DownArrow && mainlist.current-item + 1 < items.length) {
                mainlist.current-item += 1;
                mainlist.viewport-y = -1 * mainlist.current-item * 112px;
                mainlist.current-selected = items[mainlist.current-item].index;
            } else if (event.text == Keys.DownArrow && mainlist.current-item + 1 == items.length) {
                mainlist.current-item = 0;
                mainlist.viewport-y = 0;
                mainlist.current-selected = items[mainlist.current-item].index;
            } else if (event.text == Keys.UpArrow && mainlist.current-item > 0) {
                mainlist.current-item -= 1;
                mainlist.viewport-y = -1 * mainlist.current-item * 112px;
                mainlist.current-selected = items[mainlist.current-item].index;
            } else if (event.text == Keys.UpArrow && mainlist.current-item == 0) {
                mainlist.current-item = items.length - 1;
                mainlist.viewport-y = -1 * mainlist.current-item * 112px;
                mainlist.current-selected = items[mainlist.current-item].index;
            } else if (event.text == Keys.Return) {
                request-start-app(mainlist.current-selected);
            }
            accept
        }
    }
    HorizontalBox {
        VerticalBox {
            HorizontalLayout {
                searchline := LineEdit { 
                    placeholder-text: "世界に革命を起こす力をください";
                    edited(text) => {
                        request-fillter(text);
                        mainlist.viewport-y = 0;
                        mainlist.current-item = -1;
                        mainlist.current-selected = -1;
                        image.rotation-angle = image.rotation-angle + 1deg;
                    }
                }
                image := Image {
                    source: root.defaultimage;
                    width: 35px;
                    height: 35px;
                    rotation-angle: 0deg;
                }
            }
            mainlist := ListView {
                has-focus:true;
                property <int> current-item : -1 ;
                property <int> current-selected: -1;
                for item[idx] in items : Rectangle {
                    background: idx == mainlist.current-item ? Colors.grey 
                        : touch.has-hover ? Colors.dimgrey
                        : Colors.white;
                    HorizontalLayout {
                        VerticalBox {
                            spacing: 10px;
                            Image {
                                source: item.icon;
                                width: 100px;
                                height: 100px;
                            }
                        }
                        VerticalBox {
                            Text {
                                text: item.title;
                                font-weight: 10;
                                font-size: 20px;
                            }
                            Text { 
                                text: item.description;
                                font-weight: 1;
                                font-size: 10px;
                            }
                        }
                    }
                    touch := TouchArea {
                        width: parent.width;
                        height: parent.height;
                        clicked => {
                            request-start-app(item.index);
                        }
                    }
                }
            }
        }
        VerticalBox {
            spacing: 3px;
            visible: mainlist.current-item >= 0;
            width: mainlist.current-item >= 0 ? 250px : 0;
            Image { 
                source: mainlist.current-item >= 0 ? items[mainlist.current-item].icon : root.defaultimage;
                //height: mainlist.current-item >= 0 ? 70px : 0;
            }
            Text {
                text: "supported types";
                horizontal-alignment: center;
                font-size: 20px;
                font-weight: 5;
            }
            if mainlist.current-item >=0 :  StandardListView{
                model:items[mainlist.current-item].supported_types;
            }
            Text { 
                text: "Categrades";
                horizontal-alignment: center;
                font-size: 20px;
                font-weight: 5;
            }
            if mainlist.current-item >= 0 : ScrollView {
                height: 70px;
                HorizontalBox {  
                    for cat in items[mainlist.current-item].categrades : Rectangle {
                        background: Colors.pink;
                        border-radius: 15px;
                        HorizontalBox { 
                            Image { source: root.defaultimage; height: 20px; width: 20px; }
                            Text { text: cat; }
                            
                        }
                    }
                }
            }
        }
    }
}
